Exercise

1. What are some pros and cons of using linked lists instead of arrays?
A linked list does not need sequential memory bits so lists are able to grow easily but because of this the items have to arrows or data that point them to the previous data item. This means in order to find a certain item the list would have to be searched from the beginning. 


2. Come up with a real world example of a linked list.
A real world example of a linked list would be 

Programming Questions
1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

This code doesn't quite keep track of the path that is being created with every addition to the list. It links the head but does not loop through the list to figure out where to add the next element. 

FUNCTION push(element)
  CREATE node
    SET node.value TO element
    SET node.next TO null

  IF the head node does not exist
    THEN SET head to null
  ELSE
    WHILE node.next !== null
    Set Node = Node.next
    Return Node.next = new.Node
  END IF
END FUNCTION

class Node {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {
  constructor() {
    this.head = null;
  }

  push(value) {
    var newNode = new Node(value);

    if (this.head === null) {
      this.head = newNode;
    } else {
      var current = this.head;

      while(current.next !== null) {
        current = current.next;
      }

      current.next = newNode;
    }
  }

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

FUNCTION removeDuplicates(list)
set temp to headNode

WHILE the temp is not null
  set nextNode to temp.next
  WHILE nextNode is not null
  COMPARE temp to nextNode
    IF temp.element equals nextNode.element
      THEN set temp.next = nextNode.next;
      Delete nextNode;
    End IF
    set nextNode equal to nextNode.next
    End While
  set temp equal to temp.next
  end While
End function


LinkedList.prototype.duplicate = function(){
 if (!this.head || !this.head.next) {
      console.log("no duplicates");
      return;
  }

    var thisNode = this.head;
    while (thisNode != null) {
      var previousNode = thisNode;
      var nextNode = thisNode.next;
      while (nextNode != null) {
        if (thisNode.value == nextNode.value) {
          previousNode.next = nextNode.next;
          this.length --;
        } else {
          previousNode = nextNode;
        }
        nextNode = nextNode.next;
      }
      thisNode = thisNode.next;
    }
    return this;
}

3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

FUNCTION reverse()
set current to headNode
set next to null
set previous to null
while current does not equal null
  set next to current.nextNode
  set current.next to previous
  set previous to current
  set current to next
end While
  set headNode to previous
End Function

LinkedList.prototype.reverse= function() {
    var previousNode = null;
    var thisNode = this.head;
    var nextNode;

    while (thisNode) {
      nextNode = thisNode.next;
      thisNode.next = previousNode;
      previousNode = thisNode;
      thisNode = nextNode;
    }

    this.head = previousNode;
  }