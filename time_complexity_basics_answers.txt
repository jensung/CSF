Exercises

1. What is time complexity and what is its relation to algorithms?
  It is the amount of time a program would need to run based on input size. It would estimate the time it would take for an algorithm to complete all the operations for all the inputs.

2. What is runtime?
  It's the time it takes for an algorithm to run. Sometimes is used synonymously with time complexity.

3. How is the runtime of an algorithm calculated?
  To calculate the runtime, we add up how many instructions the algorithm will execute according to the size of the input, then simplify the expression to the largest term, and drop any constants.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
  a. Constant - O(1)
  b. Logarithmic - O(log n)
  c. Linear - O(n)
  d. Log-Linear - O(n log n)
  e. Quadratic - O(n^2)
  f. Exponential - O(2^n)
  g. Factorial - O(n!)

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
  Linear - Ticket sales. As the number of people attending a concert increases the number of tickets sold increases at the same rate.

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.
  FUNCTION linearSearch(array, target)
  FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
  END FOR
  RETURN false
  END FUNCTION

  A: O(n)

7. Determine the time complexity of the following snippet of code.
  FUNCTION foo(array)
   FOR each number in the array
     FOR each number in the array
       print "Hello"
     END FOR
   END FOR
  END FUNCTION

  A: O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.
  FUNCTION fibonacci(number)
   IF number < 1 THEN
     ERROR
   ELSE IF number = 1 or 2 THEN
     RETURN 1
   ELSE
     CALL fibonacci WITH number - 2 RETURNING twoBack
     CALL fibonacci WITH number - 1 RETURNING oneBack
     RETURN twoBack + oneBack
   END IF
  END FUNCTION

  A: O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?
    Linear
